# Configuration file
# key = value

# Logging properties
quarkus.log.category."com.redhat.cloud.policies.engine".level=${EXTERNAL_LOGGING_LEVEL:INFO}
quarkus.log.category."org.hawkular.alerts.engine".level=${EXTERNAL_LOGGING_LEVEL:INFO}

# Sentry logging. Off by default, enabled on OpenShift
# See https://quarkus.io/guides/logging-sentry#in-app-packages
quarkus.log.sentry=false
quarkus.log.sentry.in-app-packages=*
quarkus.log.sentry.dsn=FILL_ME
# WARN is the sentry default. It is listed here for documentation purposes.
# quarkus.log.sentry.level=WARN

# Http port
quarkus.http.port=8084
%test.quarkus.http.port=8095
%test.quarkus.http.test-port=8095
# http access log
quarkus.http.access-log.enabled=true
quarkus.http.access-log.category=access_log
quarkus.http.access-log.pattern=combined


# For dev only
#external.org.hawkular.alerts.ui.path=/home/michael/projects/hawkular-alerts-ui

# Kafka bootstrap applies to all topics
kafka.bootstrap.servers=localhost:9092

# Kafka SSL configuration
# kafka.security.protocol=SSL
# Setting this value to empty allows to skip the "hostname" verification
# kafka.ssl.endpoint.identification.algorithm=
# Path to ca public certificate
# kafka.ssl.truststore.location=
# kafka.ssl.truststore.type=PEM

# Source <= hosts
mp.messaging.incoming.events.connector=smallrye-kafka
mp.messaging.incoming.events.topic=platform.inventory.events
mp.messaging.incoming.events.group.id=correlation
mp.messaging.incoming.events.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.events.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.events.failure-strategy=fail
# Source <= hosts

mp.messaging.outgoing.webhook.connector=smallrye-kafka
mp.messaging.outgoing.webhook.topic=platform.notifications.ingress
mp.messaging.outgoing.webhook.group.id=correlation
mp.messaging.outgoing.webhook.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.webhook.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.webhook.max-inflight-messages=20
# TODO POL-649 Remove the following config key when NotificationActionPluginListener is gone.
mp.messaging.outgoing.webhook.merge=true

# == Inbound properties
engine.receiver.store-events=false
%test.engine.receiver.store-events=true

# == Infinispan properties
engine.backend.ispn.reindex=false
%test.engine.backend.ispn.reindex=true

# How many hours do we retain the stored events. Set to negative value to store forever
engine.backend.ispn.events-lifespan=1

# How many hours do we retain the alerts. Set to negative value to store forever
engine.backend.ispn.alerts-lifespan=24
%test.engine.backend.ispn.alerts-lifespan=1

# Used to clean triggers and data cache, defined in milliseconds
engine.backend.ispn.partition-lifespan=100

# Store only thin part of the alerts
engine.backend.ispn.alerts-thin=false

%test.hawkular.data=hawkular.data

# == Drools properties
engine.rules.events.duplicate-filter-time=0

# Milliseconds
engine.rules.data.duplicate-filter-time=1000

# == Cache manager properties
engine.cache.disable-publish-filtering=false
engine.cache.reset-publish-cache=true
engine.backend.ispn.actions-ephemeral=true
%test.engine.backend.ispn.actions-ephemeral=false

# == Alerts Engine properties

# Milliseconds
engine.alerts.engine-delay=1000
%test.engine.alerts.engine-delay=100

# Milliseconds
engine.alerts.engine-period=2000
%test.engine.alerts.engine-period=200

# Defines if engine extensions are enabled and data is sent to them for processing
engine.alerts.engine-extensions=false

engine.data-driven-triggers-enabled=false

# If the last evaluated time should be updated to Infinispan
engine.alerts.condition-evaluation-time=true

quarkus.jaeger.enabled=false
quarkus.jaeger.service-name=policies-engine
quarkus.jaeger.sampler-type=const
quarkus.jaeger.sampler-param=1
# The next one is to send trace data directly to the collector.
# Should not be used when then agent is present on a node.
# Depending on the location, the default port is 14268
#quarkus.jaeger.endpoint=http://jaeger-c.apps-crc.testing/api/traces

quarkus.log.level=INFO
quarkus.log.cloudwatch.enabled=false
quarkus.log.cloudwatch.region=us-east-1
quarkus.log.cloudwatch.log-group=policiesLogGroup
quarkus.log.cloudwatch.log-stream-name=policies-engine
quarkus.log.cloudwatch.level=INFO
quarkus.log.cloudwatch.access-key-id=placeholder
quarkus.log.cloudwatch.access-key-secret=placeholder

# This is a new feature introduced in Quarkus 1.13 and used by the dev UI.
# It is causing failures when the app is started with quarkus:dev because some parts of our code are not compliant with the CDI spec.
quarkus.arc.dev-mode.monitoring-enabled=false

# During tests only, the SQL schema required for policies history is created using Flyway.
%test.quarkus.flyway.migrate-at-start=true

# The following database is used to store the policies history data which is then used from the policies-ui-backend project.
# The database schema is managed by policies-ui-backend.
quarkus.datasource.db-kind=postgresql
quarkus.datasource.jdbc.url=jdbc:postgresql://127.0.0.1:5432/postgres
quarkus.datasource.username=postgres
quarkus.datasource.password=postgres

# Transforms camel case entities attributes names into snake case.
quarkus.hibernate-orm.physical-naming-strategy=com.redhat.cloud.policies.engine.history.SnakeCasePhysicalNamingStrategy

# Uncomment to log Hibernate SQL statements
#quarkus.hibernate-orm.log.sql=true

# Quarkus since 1.11 redirects non-apps to /q/. We need to prevent this
quarkus.http.non-application-root-path=/

engine.triggers-lifecycle.disabled=true
engine.actions-store.disabled=true

# Enables LightweightEngine which is an engine implementation that does not rely on Infinispan or Drools.
lightweight-engine.enabled=false

quarkus.log.category."com.redhat.cloud.policies.engine.LightweightEngineImpl".level=DEBUG
